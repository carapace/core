// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/internal/v0 (interfaces: Authenticator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// CheckSignatures mocks base method
func (m *MockAuthenticator) CheckSignatures(arg0 *proto.Witness) (bool, string, error) {
	ret := m.ctrl.Call(m, "CheckSignatures", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckSignatures indicates an expected call of CheckSignatures
func (mr *MockAuthenticatorMockRecorder) CheckSignatures(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignatures", reflect.TypeOf((*MockAuthenticator)(nil).CheckSignatures), arg0)
}

// GetOwners mocks base method
func (m *MockAuthenticator) GetOwners() (*proto.OwnerSet, error) {
	ret := m.ctrl.Call(m, "GetOwners")
	ret0, _ := ret[0].(*proto.OwnerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwners indicates an expected call of GetOwners
func (mr *MockAuthenticatorMockRecorder) GetOwners() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwners", reflect.TypeOf((*MockAuthenticator)(nil).GetOwners))
}

// GrantBackupRoot mocks base method
func (m *MockAuthenticator) GrantBackupRoot(arg0 *proto.Witness) (bool, error) {
	ret := m.ctrl.Call(m, "GrantBackupRoot", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantBackupRoot indicates an expected call of GrantBackupRoot
func (mr *MockAuthenticatorMockRecorder) GrantBackupRoot(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantBackupRoot", reflect.TypeOf((*MockAuthenticator)(nil).GrantBackupRoot), arg0)
}

// GrantRoot mocks base method
func (m *MockAuthenticator) GrantRoot(arg0 *proto.Witness) (bool, error) {
	ret := m.ctrl.Call(m, "GrantRoot", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantRoot indicates an expected call of GrantRoot
func (mr *MockAuthenticatorMockRecorder) GrantRoot(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantRoot", reflect.TypeOf((*MockAuthenticator)(nil).GrantRoot), arg0)
}

// HaveOwners mocks base method
func (m *MockAuthenticator) HaveOwners() bool {
	ret := m.ctrl.Call(m, "HaveOwners")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HaveOwners indicates an expected call of HaveOwners
func (mr *MockAuthenticatorMockRecorder) HaveOwners() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaveOwners", reflect.TypeOf((*MockAuthenticator)(nil).HaveOwners))
}

// Quorum mocks base method
func (m *MockAuthenticator) Quorum() (int32, error) {
	ret := m.ctrl.Call(m, "Quorum")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Quorum indicates an expected call of Quorum
func (mr *MockAuthenticatorMockRecorder) Quorum() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quorum", reflect.TypeOf((*MockAuthenticator)(nil).Quorum))
}

// SetOwners mocks base method
func (m *MockAuthenticator) SetOwners(arg0 context.Context, arg1 *proto.OwnerSet) error {
	ret := m.ctrl.Call(m, "SetOwners", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwners indicates an expected call of SetOwners
func (mr *MockAuthenticatorMockRecorder) SetOwners(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwners", reflect.TypeOf((*MockAuthenticator)(nil).SetOwners), arg0, arg1)
}

// Weight mocks base method
func (m *MockAuthenticator) Weight(arg0 *proto.Witness) (int32, error) {
	ret := m.ctrl.Call(m, "Weight", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Weight indicates an expected call of Weight
func (mr *MockAuthenticatorMockRecorder) Weight(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*MockAuthenticator)(nil).Weight), arg0)
}
