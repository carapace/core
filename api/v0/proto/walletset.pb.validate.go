// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: walletset.proto

package v0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Wallet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Wallet) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return WalletValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _Wallet_Asset_NotInLookup[m.GetAsset()]; ok {
		return WalletValidationError{
			field:  "Asset",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := Asset_name[int32(m.GetAsset())]; !ok {
		return WalletValidationError{
			field:  "Asset",
			reason: "value must be one of the defined enum values",
		}
	}

	if len(m.GetAccess()) < 1 {
		return WalletValidationError{
			field:  "Access",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetAccess() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  fmt.Sprintf("Access[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.State.(type) {

	case *Wallet_Enabled:

		if v, ok := interface{}(m.GetEnabled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Wallet_Disabled:

		if v, ok := interface{}(m.GetDisabled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  "Disabled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WalletValidationError is the validation error returned by Wallet.Validate if
// the designated constraints aren't met.
type WalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletValidationError) ErrorName() string { return "WalletValidationError" }

// Error satisfies the builtin error interface
func (e WalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletValidationError{}

var _Wallet_Asset_NotInLookup = map[Asset]struct{}{
	0: {},
}
