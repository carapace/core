// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/core (interfaces: UserSet)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserSet is a mock of UserSet interface
type MockUserSet struct {
	ctrl     *gomock.Controller
	recorder *MockUserSetMockRecorder
}

// MockUserSetMockRecorder is the mock recorder for MockUserSet
type MockUserSetMockRecorder struct {
	mock *MockUserSet
}

// NewMockUserSet creates a new mock instance
func NewMockUserSet(ctrl *gomock.Controller) *MockUserSet {
	mock := &MockUserSet{ctrl: ctrl}
	mock.recorder = &MockUserSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserSet) EXPECT() *MockUserSetMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockUserSet) All(arg0 context.Context, arg1 *sql.Tx) ([]*proto.UserSet, error) {
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].([]*proto.UserSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockUserSetMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockUserSet)(nil).All), arg0, arg1)
}

// Get mocks base method
func (m *MockUserSet) Get(arg0 context.Context, arg1 *sql.Tx, arg2 string) (*proto.UserSet, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*proto.UserSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserSetMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserSet)(nil).Get), arg0, arg1, arg2)
}

// Put mocks base method
func (m *MockUserSet) Put(arg0 context.Context, arg1 *sql.Tx, arg2 *proto.UserSet) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockUserSetMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUserSet)(nil).Put), arg0, arg1, arg2)
}
