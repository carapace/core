// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/core (interfaces: PolicyManager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPolicyManager is a mock of PolicyManager interface
type MockPolicyManager struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyManagerMockRecorder
}

// MockPolicyManagerMockRecorder is the mock recorder for MockPolicyManager
type MockPolicyManagerMockRecorder struct {
	mock *MockPolicyManager
}

// NewMockPolicyManager creates a new mock instance
func NewMockPolicyManager(ctrl *gomock.Controller) *MockPolicyManager {
	mock := &MockPolicyManager{ctrl: ctrl}
	mock.recorder = &MockPolicyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPolicyManager) EXPECT() *MockPolicyManagerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPolicyManager) Add(arg0 context.Context, arg1 *sql.Tx, arg2 *proto.Policy, arg3, arg4 string) error {
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockPolicyManagerMockRecorder) Add(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPolicyManager)(nil).Add), arg0, arg1, arg2, arg3, arg4)
}

// All mocks base method
func (m *MockPolicyManager) All(arg0 context.Context, arg1 *sql.Tx) ([]*proto.Policy, error) {
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].([]*proto.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockPolicyManagerMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPolicyManager)(nil).All), arg0, arg1)
}

// Delete mocks base method
func (m *MockPolicyManager) Delete(arg0 context.Context, arg1 *sql.Tx, arg2 *proto.Policy) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPolicyManagerMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicyManager)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockPolicyManager) Get(arg0 context.Context, arg1 *sql.Tx, arg2, arg3 string) ([]*proto.Policy, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*proto.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPolicyManagerMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicyManager)(nil).Get), arg0, arg1, arg2, arg3)
}

// Set mocks base method
func (m *MockPolicyManager) Set(arg0 context.Context, arg1 *sql.Tx, arg2 []*proto.Policy, arg3, arg4 string) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockPolicyManagerMockRecorder) Set(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPolicyManager)(nil).Set), arg0, arg1, arg2, arg3, arg4)
}
