// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/core (interfaces: Warden)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	ladon "github.com/ory/ladon"
	reflect "reflect"
)

// MockWarden is a mock of Warden interface
type MockWarden struct {
	ctrl     *gomock.Controller
	recorder *MockWardenMockRecorder
}

// MockWardenMockRecorder is the mock recorder for MockWarden
type MockWardenMockRecorder struct {
	mock *MockWarden
}

// NewMockWarden creates a new mock instance
func NewMockWarden(ctrl *gomock.Controller) *MockWarden {
	mock := &MockWarden{ctrl: ctrl}
	mock.recorder = &MockWardenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWarden) EXPECT() *MockWardenMockRecorder {
	return m.recorder
}

// IsAllowed mocks base method
func (m *MockWarden) IsAllowed(arg0 context.Context, arg1 *sql.Tx, arg2, arg3 string, arg4 *ladon.Request) error {
	ret := m.ctrl.Call(m, "IsAllowed", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockWardenMockRecorder) IsAllowed(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockWarden)(nil).IsAllowed), arg0, arg1, arg2, arg3, arg4)
}

// PoliciesAllow mocks base method
func (m *MockWarden) PoliciesAllow(arg0 *ladon.Request, arg1 []*proto.Policy, arg2 string) error {
	ret := m.ctrl.Call(m, "PoliciesAllow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PoliciesAllow indicates an expected call of PoliciesAllow
func (mr *MockWardenMockRecorder) PoliciesAllow(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAllow", reflect.TypeOf((*MockWarden)(nil).PoliciesAllow), arg0, arg1, arg2)
}
