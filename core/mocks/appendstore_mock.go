// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/core (interfaces: SetStore)

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSetStore is a mock of SetStore interface
type MockSetStore struct {
	ctrl     *gomock.Controller
	recorder *MockSetStoreMockRecorder
}

// MockSetStoreMockRecorder is the mock recorder for MockSetStore
type MockSetStoreMockRecorder struct {
	mock *MockSetStore
}

// NewMockSetStore creates a new mock instance
func NewMockSetStore(ctrl *gomock.Controller) *MockSetStore {
	mock := &MockSetStore{ctrl: ctrl}
	mock.recorder = &MockSetStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetStore) EXPECT() *MockSetStoreMockRecorder {
	return m.recorder
}

// GetOwnerSet mocks base method
func (m *MockSetStore) GetOwnerSet(arg0 *sql.Tx) (*proto.OwnerSet, error) {
	ret := m.ctrl.Call(m, "GetOwnerSet", arg0)
	ret0, _ := ret[0].(*proto.OwnerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerSet indicates an expected call of GetOwnerSet
func (mr *MockSetStoreMockRecorder) GetOwnerSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerSet", reflect.TypeOf((*MockSetStore)(nil).GetOwnerSet), arg0)
}

// PutOwnerSet mocks base method
func (m *MockSetStore) PutOwnerSet(arg0 *sql.Tx, arg1 *proto.OwnerSet) error {
	ret := m.ctrl.Call(m, "PutOwnerSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOwnerSet indicates an expected call of PutOwnerSet
func (mr *MockSetStoreMockRecorder) PutOwnerSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOwnerSet", reflect.TypeOf((*MockSetStore)(nil).PutOwnerSet), arg0, arg1)
}
