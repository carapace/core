// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/core (interfaces: APIService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPIService is a mock of APIService interface
type MockAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockAPIServiceMockRecorder
}

// MockAPIServiceMockRecorder is the mock recorder for MockAPIService
type MockAPIServiceMockRecorder struct {
	mock *MockAPIService
}

// NewMockAPIService creates a new mock instance
func NewMockAPIService(ctrl *gomock.Controller) *MockAPIService {
	mock := &MockAPIService{ctrl: ctrl}
	mock.recorder = &MockAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIService) EXPECT() *MockAPIServiceMockRecorder {
	return m.recorder
}

// ConfigService mocks base method
func (m *MockAPIService) ConfigService(arg0 context.Context, arg1 *proto.Config) (*proto.Response, error) {
	ret := m.ctrl.Call(m, "ConfigService", arg0, arg1)
	ret0, _ := ret[0].(*proto.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigService indicates an expected call of ConfigService
func (mr *MockAPIServiceMockRecorder) ConfigService(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigService", reflect.TypeOf((*MockAPIService)(nil).ConfigService), arg0, arg1)
}

// InfoService mocks base method
func (m *MockAPIService) InfoService(arg0 context.Context) (*proto.Info, error) {
	ret := m.ctrl.Call(m, "InfoService", arg0)
	ret0, _ := ret[0].(*proto.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoService indicates an expected call of InfoService
func (mr *MockAPIServiceMockRecorder) InfoService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoService", reflect.TypeOf((*MockAPIService)(nil).InfoService), arg0)
}
