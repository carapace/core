// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carapace/core/core (interfaces: ConfigManager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	proto "github.com/carapace/core/api/v0/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigManager is a mock of ConfigManager interface
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockConfigManager) Add(arg0 context.Context, arg1 *sql.Tx, arg2 *proto.Config) error {
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockConfigManagerMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockConfigManager)(nil).Add), arg0, arg1, arg2)
}
